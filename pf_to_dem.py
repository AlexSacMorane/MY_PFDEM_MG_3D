# -*- encoding=utf-8 -*-

import pickle, math, os, shutil
from pathlib import Path
import numpy as np
import matplotlib.pyplot as plt
import vtk, skfmm
from vtk.util.numpy_support import vtk_to_numpy

# own
import tools

# -----------------------------------------------------------------------------#

def sort_files(dict_user, dict_sample):
     '''
     Sort files generated by MOOSE to different directories
     '''
     os.rename('pf_out.e','vtk/pf_out.e')
     os.rename('pf.i','input/pf.i')
     j = 0
     j_str = index_to_str(j)
     j_total_str = index_to_str(dict_user['j_total'])
     filepath = Path('pf_other_'+j_str+'.pvtu')
     while filepath.exists():
         for i_proc in range(dict_user['n_proc']):
            os.rename('pf_other_'+j_str+'_'+str(i_proc)+'.vtu','vtk/pf_other_'+j_str+'_'+str(i_proc)+'.vtu')
            shutil.copyfile('vtk/pf_other_'+j_str+'_'+str(i_proc)+'.vtu','vtk/pf_'+j_total_str+'_'+str(i_proc)+'.vtu')
         os.rename('pf_other_'+j_str+'.pvtu','vtk/pf_other_'+j_str+'.pvtu')
         # write .pvtu to save all vtk
         file = open('vtk/pf_'+j_total_str+'.pvtu','w')
         file.write('''<?xml version="1.0"?>
         <VTKFile type="PUnstructuredGrid" version="0.1" byte_order="LittleEndian" header_type="UInt32" compressor="vtkZLibDataCompressor">
         \t<PUnstructuredGrid GhostLevel="1">
         \t\t<PPointData>
         \t\t\t<PDataArray type="Float64" Name="as"/>
         \t\t\t<PDataArray type="Float64" Name="kc"/>
         \t\t\t<PDataArray type="Float64" Name="eta1"/>
         \t\t\t<PDataArray type="Float64" Name="eta2"/>
         \t\t\t<PDataArray type="Float64" Name="c"/>
         \t\t</PPointData>
         \t\t<PCellData>
         \t\t\t<PDataArray type="Int32" Name="libmesh_elem_id"/>
         \t\t\t<PDataArray type="Int32" Name="subdomain_id"/>
         \t\t\t<PDataArray type="Int32" Name="processor_id"/>
         \t\t</PCellData>
         \t\t<PPoints>
         \t\t\t<PDataArray type="Float64" Name="Points" NumberOfComponents="3"/>
         \t\t</PPoints>''')
         line = ''
         for i_proc in range(dict_user['n_proc']):
             line = line + '''\t\t<Piece Source="pf_'''+j_total_str+'''_'''+str(i_proc)+'''.vtu"/>\n'''
         file.write(line)
         file.write('''\t</PUnstructuredGrid>
         </VTKFile>''')
         file.close()
         j = j + 1
         j_str = index_to_str(j)
         filepath = Path('pf_other_'+j_str+'.pvtu')
         dict_user['j_total'] = dict_user['j_total'] + 1
         j_total_str = index_to_str(dict_user['j_total'])
     return index_to_str(j-1)

# -----------------------------------------------------------------------------#

def index_to_str(j):
    '''
    Convert a integer into a string with the format XXX.
    '''
    if j < 10:
        return '00'+str(j)
    elif 10<=j and j<100:
        return '0'+str(j)
    else :
        return str(j)

# -----------------------------------------------------------------------------#

def read_vtk(dict_user, dict_sample, j_str):
    '''
    Read the last vtk files to obtain data from MOOSE.

    Do not work calling yade.
    '''
    eta_1_map_old = dict_sample['eta_1_map'].copy()
    c_map_old = dict_sample['c_map'].copy()
    L_eta1 = []
    L_c = []
    if not dict_sample['Map_known']:
        L_XYZ = []
        L_L_i_XYZ = []

    # iterate on the proccessors used
    for i_proc in range(dict_user['n_proc']):
        print('processor',i_proc+1,'/',dict_user['n_proc'])

        # name of the file to load
        namefile = 'vtk/pf_other_'+j_str+'_'+str(i_proc)+'.vtu'

        # load a vtk file as input
        reader = vtk.vtkXMLUnstructuredGridReader()
        reader.SetFileName(namefile)
        reader.Update()

        # Grab a scalar from the vtk file
        nodes_vtk_array = reader.GetOutput().GetPoints().GetData()
        eta1_vtk_array = reader.GetOutput().GetPointData().GetArray("eta1")
        eta2_vtk_array = reader.GetOutput().GetPointData().GetArray("eta2")
        c_vtk_array = reader.GetOutput().GetPointData().GetArray("c")

        #Get the coordinates of the nodes and the scalar values
        nodes_array = vtk_to_numpy(nodes_vtk_array)
        eta1_array = vtk_to_numpy(eta1_vtk_array)
        eta2_array = vtk_to_numpy(eta2_vtk_array)
        c_array = vtk_to_numpy(c_vtk_array)

        # map is not know
        if not dict_sample['Map_known']:
            # save the map
            L_i_XYZ = []
            # Must detect common zones between processors
            for i_XYZ in range(len(nodes_array)) :
                XYZ = nodes_array[i_XYZ]
                # Do not consider twice a point
                if list(XYZ) not in L_XYZ :
                    # search node in the mesh
                    L_search = list(abs(np.array(dict_sample['x_L']-list(XYZ)[0])))
                    i_x = L_search.index(min(L_search))
                    L_search = list(abs(np.array(dict_sample['y_L']-list(XYZ)[1])))
                    i_y = L_search.index(min(L_search))
                    L_search = list(abs(np.array(dict_sample['z_L']-list(XYZ)[2])))
                    i_z = L_search.index(min(L_search))
                    # save map
                    L_XYZ.append(list(XYZ))
                    L_i_XYZ.append([i_x, i_y, i_z])
                    # rewrite map
                    dict_sample['eta_1_map'][i_x, i_y, i_z] = eta1_array[i_XYZ]
                    dict_sample['eta_2_map'][i_x, i_y, i_z] = eta2_array[i_XYZ]
                    dict_sample['c_map'][i_x, i_y, i_z] = c_array[i_XYZ]
                else :
                    L_i_XYZ.append(None)
            # Here the algorithm can be help as the mapping is known
            L_L_i_XYZ.append(L_i_XYZ)

        # map is known
        else :
            # iterate on data
            for i_XYZ in range(len(nodes_array)) :
                # read
                if dict_sample['L_L_i_XYZ_used'][i_proc][i_XYZ] != None :
                    i_x = dict_sample['L_L_i_XYZ_used'][i_proc][i_XYZ][0]
                    i_y = dict_sample['L_L_i_XYZ_used'][i_proc][i_XYZ][1]
                    i_z = dict_sample['L_L_i_XYZ_used'][i_proc][i_XYZ][2]
                    # rewrite map
                    dict_sample['eta_1_map'][i_x, i_y, i_z] = eta1_array[i_XYZ]
                    dict_sample['eta_2_map'][i_x, i_y, i_z] = eta2_array[i_XYZ]
                    dict_sample['c_map'][i_x, i_y, i_z] = c_array[i_XYZ]
    
    if not dict_sample['Map_known']:
        # the map is known
        dict_sample['Map_known'] = True
        dict_sample['L_L_i_XYZ_used'] = L_L_i_XYZ

# -----------------------------------------------------------------------------#

def compute_levelset(dict_user, dict_sample):
    '''
    From a phase map, compute level set function.
    '''
    # compute binary map
    bin_1_map = np.array(np.zeros((dict_user['n_mesh_x'], dict_user['n_mesh_y'], dict_user['n_mesh_z'])))
    bin_2_map = np.array(np.zeros((dict_user['n_mesh_x'], dict_user['n_mesh_y'], dict_user['n_mesh_z'])))
    # iteration on x
    for i_x in range(len(dict_sample['x_L'])):
        # iteration on y
        for i_y in range(len(dict_sample['y_L'])):
            # iteration on z
            for i_z in range(len(dict_sample['z_L'])):
                # grain 1
                if dict_sample['eta_1_map'][i_x, i_y, i_z] > 0.5:
                    bin_1_map[i_x, i_y, i_z] = 1
                else :
                    bin_1_map[i_x, i_y, i_z] = -1
                # grain 2
                if dict_sample['eta_2_map'][i_x, i_y, i_z] > 0.5:
                    bin_2_map[i_x, i_y, i_z] = 1
                else :
                    bin_2_map[i_x, i_y, i_z] = -1
    # compute signed distance function
    sdf_1_map = -skfmm.distance(bin_1_map, dx=np.array([dict_sample['x_L'][1]-dict_sample['x_L'][0],\
                                                        dict_sample['y_L'][1]-dict_sample['y_L'][0],\
                                                        dict_sample['z_L'][1]-dict_sample['z_L'][0]]))
    sdf_2_map = -skfmm.distance(bin_2_map, dx=np.array([dict_sample['x_L'][1]-dict_sample['x_L'][0],\
                                                        dict_sample['y_L'][1]-dict_sample['y_L'][0],\
                                                        dict_sample['z_L'][1]-dict_sample['z_L'][0]]))

    # save data
    dict_save = {
    'L_x': dict_sample['x_L'],
    'L_y': dict_sample['y_L'],
    'L_z': dict_sample['z_L'],
    'sdf_1_map': sdf_1_map,
    'sdf_2_map': sdf_2_map
    }
    with open('data/level_sets.data', 'wb') as handle:
        pickle.dump(dict_save, handle, protocol=pickle.HIGHEST_PROTOCOL)


